"use strict";(self.webpackChunketro_site_2=self.webpackChunketro_site_2||[]).push([[113],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,y=u["".concat(l,".").concat(m)]||u[m]||f[m]||o;return n?r.createElement(y,i(i({ref:t},p),{},{components:n})):r.createElement(y,i({ref:t},p))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1113:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:5},i="Dynamic Properties",s={unversionedId:"dynamic-properties",id:"dynamic-properties",title:"Dynamic Properties",description:"Dynamic properties are generic values that can be updated at runtime. There are three types of dynamic properties:",source:"@site/docs/dynamic-properties.md",sourceDirName:".",slug:"/dynamic-properties",permalink:"/docs/dynamic-properties",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Visual Effect",permalink:"/docs/effects/visual"},next:{title:"Tutorials",permalink:"/docs/category/tutorials"}},l={},c=[{value:"Constant Values",id:"constant-values",level:2},{value:"Keyframe Animations",id:"keyframe-animations",level:2},{value:"Functions",id:"functions",level:2},{value:"Usage in Layers and Effects",id:"usage-in-layers-and-effects",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dynamic-properties"},"Dynamic Properties"),(0,a.kt)("p",null,"Dynamic properties are generic values that can be updated at runtime. There are three types of dynamic properties:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Constant values"),(0,a.kt)("li",{parentName:"ul"},"Keyframe animations"),(0,a.kt)("li",{parentName:"ul"},"Functions")),(0,a.kt)("h2",{id:"constant-values"},"Constant Values"),(0,a.kt)("p",null,"Constant values are the simplest type of dynamic properties. They are just regular values:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const effect = new etro.effect.Channels({\n  factors: {\n    r: 1,\n    g: 0,\n    b: 0,\n  },\n})\n")),(0,a.kt)("h2",{id:"keyframe-animations"},"Keyframe Animations"),(0,a.kt)("p",null,"Keyframe animations are a list of keyframes that are interpolated between. Each point in the keyframe has a start time and a value:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const effect = new etro.effect.Channels({\n  factors: {\n    r: new etro.KeyFrame([\n      [0, 1],\n      [1, 0],\n    ]),\n    g: 0,\n    b: 0,\n  },\n})\n")),(0,a.kt)("p",null,"The above example will animate the red channel from 1 to 0 over the course of one second."),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("p",null,"Functions are functions that are called every frame to get the current value. They are useful for creating custom animations:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const effect = new etro.effect.Channels({\n  factors: {\n    r: (element: etro.EtroObject, time: number) => {\n      return Math.random()\n    },\n    g: 0,\n    b: 0,\n  },\n})\n")),(0,a.kt)("p",null,"The above example will animate the red channel to a random value every frame."),(0,a.kt)("h2",{id:"usage-in-layers-and-effects"},"Usage in Layers and Effects"),(0,a.kt)("p",null,"To add a dynamic property to your layer or effect, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"Dynamic")," generic type. To evaluate the property on a given frame, use ",(0,a.kt)("inlineCode",{parentName:"p"},"etro.val()"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class MyEffect extends etro.effect.Base {\n  foo: Dynamic<number>\n\n  constructor(foo: Dynamic<number> = 1) {\n    super()\n\n    this.foo = foo\n  }\n\n  apply(target: etro.Movie | etro.layer.Base, time: number) {\n    super(target, time)\n\n    const foo = etro.val(this, 'foo', time)\n    // Do something with the evaluated `foo`\n  }\n}\n")))}u.isMDXComponent=!0}}]);